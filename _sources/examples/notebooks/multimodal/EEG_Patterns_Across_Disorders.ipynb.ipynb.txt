{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c566a83d-9ade-404e-ba3f-a6fc538bd40e",
   "metadata": {},
   "source": [
    "# Average EEG signal patterns across various disorders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "28c25ff8-dbc1-41e0-b022-0a6645453557",
   "metadata": {},
   "outputs": [],
   "source": [
    "import mne\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "\n",
    "from almirah import Dataset\n",
    "\n",
    "mne.set_log_level(False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b0213002-d28a-4536-b53b-0691b06d0ca7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1120"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds = Dataset(name=\"calm-brain\")\n",
    "eeg_header_files = ds.query(datatype=\"eeg\", task=\"rest\", extension=\".vhdr\")\n",
    "eeg_data_files = ds.query(datatype=\"eeg\", task=\"rest\", extension=\".eeg\")\n",
    "len(eeg_data_files)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b7ca8c49-651c-46e5-be5e-cec840985f36",
   "metadata": {},
   "outputs": [],
   "source": [
    "for file in eeg_data_files:\n",
    "    file.download()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9fe1dad9-90cd-422f-8daa-d4951b541af0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>subject</th>\n",
       "      <th>session</th>\n",
       "      <th>addiction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>D0019</td>\n",
       "      <td>101</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>D0019</td>\n",
       "      <td>111</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>D0020</td>\n",
       "      <td>101</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>D0020</td>\n",
       "      <td>111</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>D0021</td>\n",
       "      <td>101</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  subject session  addiction\n",
       "0   D0019     101          0\n",
       "1   D0019     111          0\n",
       "2   D0020     101          0\n",
       "3   D0020     111       <NA>\n",
       "4   D0021     101          0"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db = ds.components[2]\n",
    "db.connect(\"username\", \"password\")\n",
    "df = ds.query(table=\"presenting_disorders\")\n",
    "df[[\"subject\", \"session\", \"addiction\"]].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "ee31b343-5149-4c80-a595-07e4db442158",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_eeg_mean(file):\n",
    "    raw = mne.io.read_raw_brainvision(file.path)\n",
    "    return raw.get_data().mean()\n",
    "\n",
    "def get_disorders(file):\n",
    "    disorders = []\n",
    "    subject, session = file.tags[\"subject\"], file.tags[\"session\"]\n",
    "    filtered_df = df[(df[\"subject\"] == subject) & (df[\"session\"] == session)]\n",
    "\n",
    "    if filtered_df.empty:\n",
    "        print(subject, session)\n",
    "        return None\n",
    "    \n",
    "    for column in [\"addiction\", \"bipolar\", \"dementia\", \"ocd\", \"schizophrenia\"]:\n",
    "        presence = filtered_df.iloc[0][column]\n",
    "        if not pd.isna(presence) and presence:\n",
    "            disorders.append(column)\n",
    "    \n",
    "    return disorders if disorders else [\"healthy\"]\n",
    "\n",
    "def file_func(file):\n",
    "    mean_eeg, disorders = get_eeg_mean(file), get_disorders(file)\n",
    "\n",
    "    if not disorders:\n",
    "        return pd.DataFrame()\n",
    "        \n",
    "    mean_df = pd.DataFrame({\"mean\": [mean_eeg] * len(disorders), \"disorder\": disorders})\n",
    "    return mean_df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6fa03695-87f5-42f3-844e-8b7f9cf82d33",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>disorder</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.008766</td>\n",
       "      <td>healthy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000457</td>\n",
       "      <td>addiction</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.006335</td>\n",
       "      <td>healthy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.002764</td>\n",
       "      <td>healthy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.008269</td>\n",
       "      <td>ocd</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       mean   disorder\n",
       "0 -0.008766    healthy\n",
       "1  0.000457  addiction\n",
       "2 -0.006335    healthy\n",
       "3 -0.002764    healthy\n",
       "4 -0.008269        ocd"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_dfs = list(map(file_func, eeg_header_files))\n",
    "mean_dfs = [df for df in mean_dfs if not df.empty]\n",
    "mean_df = pd.concat(mean_dfs, sort=False)\n",
    "mean_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6431eaf4-989f-4705-a486-78a19c5e2d73",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>disorder</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>addiction</th>\n",
       "      <td>0.003414</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bipolar</th>\n",
       "      <td>0.001613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dementia</th>\n",
       "      <td>0.010485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>healthy</th>\n",
       "      <td>0.002449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ocd</th>\n",
       "      <td>-0.000875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>schizophrenia</th>\n",
       "      <td>0.005444</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   mean\n",
       "disorder               \n",
       "addiction      0.003414\n",
       "bipolar        0.001613\n",
       "dementia       0.010485\n",
       "healthy        0.002449\n",
       "ocd           -0.000875\n",
       "schizophrenia  0.005444"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_df.groupby(\"disorder\").mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c6dd8a4b-0a93-4ffb-813c-adee3646d4ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.violinplot(data=mean_df, x=\"mean\", hue=\"disorder\")\n",
    "sns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
